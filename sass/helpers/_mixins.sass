@use "./variables" as *
@use "sass:map"
@mixin media($screen)
  @if map-get($break-points,$screen) == null
    @error "this screen '#{$screen}' name is not valid"
  @each $name,$val in $break-points
    @if ($screen == $name)
      @media (min-width:$val)
        @content

// class generator 
/// @param $prop ,$cls, $list $cuts
/// @content $prop is the property name
/// @content $cls is for the class name or the shorcut of the property
/// @content $list list of values for 3 media screens (mobile,tablet,wide) the first parametter is the default(mobile)
/// @content $cuts is for values shortcuts for example 
/// text-align you put class name as txt and you want the values for (center,start,end) by default it just gonna print the value as class name addition
/// like txt-center {text-align:center} text-start{text-align:start}
/// you can avoid that by pass shorcuts for those addition values like (c,s,e) and that will compile to
// txt-c{text-align:center} txt-s{text-align:start} txt-e{text-align:end}

@mixin classGenerator($prop,$cls,$list,$cuts:())
  // error hadaling
  @if length($list) < 1 or type-of($list) != list
    @error "pass list as values" type-of($list)
  @if length($cuts) > 0 and length($cuts) < length($list)
    @error "list of values and shorcuts  must be equavilant"

  @each $value in $list
    @if length($cuts) > 0
      .#{$cls}-#{nth($cuts,index($list,$value))}
        #{$prop}: $value
    @else
      .#{$cls}-#{$value}
        #{$prop}: $value

/// @param $map $class
/// it takes a map of rules/properties and then turn them into classes
/// $class able you to add aditional class name like media class

@mixin properties-generator($map,$class:null)

  @each $rule,$st in $map

    $cls: map-get($st,class-name)
    $values: map-get($st,values)
    $keywords: map-get($st,values-keywords)

    /// if forget to add one of main lists 
    @if $cls == null or $values == null or $keywords  == null
      @error $cls $values $keywords "check out your properties intialization in $rules"

    @include classGenerator($rule, $cls + $class, $values, $keywords)

    // property dimenstion if it has
    $dims: map.get($st , dimensions)
    @if $dims != null and type-of($dims) == map
      @each $dim in $dims
        @include classGenerator($rule - nth($dim,1), $cls +nth($dim,2) + $class, $values, $keywords)

/// @param(pseudo-element, content, position, dimensions..., parent-positon)
/// create a "pseudo-element" 
@mixin pseudo($side:"before",$content: "",$position: absolute,$top: 0,$right: 0,$bottom: 0,$left: 0,$parent-pos: relative)
  /// add poisition relative in the parent element 
  position: $parent-pos
  /// creating a pseudo class
  &::#{$side}
    content: $content
    position: $position
    top: $top
    right: $right
    bottom: $bottom
    left: $left
    @content

@mixin fill-animation($dir:left,$bg:rgba(0, 0, 0, 0.2),$pos:relative,$transition: 600ms,$index:unset)
  position: $pos
  &:hover::before
    transform: scaleX(1)
  &::before
    content: ""
    position: absolute
    left: 0
    width: 100%
    height: 100%
    right: 0
    background-color: $bg
    transform-origin: $dir
    transform: scaleX(0)
    transition: $transition
    z-index: $index
    @content
